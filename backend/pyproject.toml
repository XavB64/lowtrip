[tool.isort]
py_version=311
profile="black"
line_length = 88
lines_after_imports = 2

sections=["FUTURE","STDLIB","THIRDPARTY","FIRSTPARTY","LOCALFOLDER"]

order_by_type = false
combine_as_imports = true
force_grid_wrap = 3
force_sort_within_sections = true
include_trailing_comma = true
use_parentheses = true


[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "setup.py",
]

# Same as Black.
indent-width = 4

target-version = "py311"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

preview = true

[tool.ruff.lint]
preview = true
ignore = [
    # Typing issues
    "ANN001",  # Missing type annotation for function argument `EF_bus`
    "ANN201",  # Missing return type annotation for public function `bicycle_to_gdf`

    "B905",  # `zip()` without an explicit `strict=` parameter

    # Copyright, documentation, todos
    "CPY001",  # Missing copyright notice at top of file
    "D100",  # Missing docstring in public module
    "D103",  # Missing docstring in public function
    "D203",  # `one-blank-line-before-class` (D203) and `no-blank-line-before-class` (D211) are incompatible. Ignoring `one-blank-line-before-class`.
    "D205",  # 1 blank line required between summary line and description
    "D213",  # `multi-line-summary-first-line` (D212) and `multi-line-summary-second-line` (D213) are incompatible. Ignoring `multi-line-summary-second-line`.
    "D401",  # First line of docstring should be in imperative mood: "Function to use when the train path is not found directly by the API."
    "D404",  # First word of the docstring should not be "This"
    "D417",  # Missing argument descriptions in the docstring for `car_bus_to_gdf`: `EF_bus`, `EF_car`, `color_cons`, `color_usage`, `tag1`, `tag2`, `validate`
    "ERA001",  # Found commented-out code

    # Flake8 errors
    "E266",  # Too many leading `#` before block comment
    "E501",  # Line too long (106 > 88)
    "E712",  # Avoid equality comparisons to `False`; use `if not plane:` for false checks
    "E741",  # Ambiguous variable name: `l`
    "T201",  # `print` found

    # Boolean trap
    "FBT002",  # Boolean default positional argument in function definition
    "FBT003",  # Boolean positional value in function call

    # Performance
    "FURB113",  # Use `canal.extend(...)` instead of repeatedly calling `canal.append()`
    "PERF401",  # Use a list comprehension to create a transformed list
    "RUF015",  # Prefer `next(iter(geom.coords))` over single element slice

    # Naming
    "N803",  # Argument name `EF_bus` should be lowercase
    "N806",  # Variable `EF_cons` in function should be lowercase

    # Pandas
    "PD002",  # `inplace=True` should be avoided; it has inconsistent behavior
    "PD011",  # Use `.to_numpy()` instead of `.values`
    "PD901",  # Avoid using the generic variable name `df` for DataFrames

    # Security
    "S113",  # Probable use of requests call without timeout

    # Code complexity / readability
    "SIM102",  # Use a single `if` statement instead of nested `if` statements
    "SIM108",  # Use ternary operator `cmap_road = colors_custom if transp == "eCar" else cmap` instead of `if`-`else`-block
    "PLR0912", # Too many branches (13 > 12)
    "PLR0913", # Too many arguments in function definition (10 > 5)
    "PLR0914", # Too many local variables
    "PLR0915", # Too many statements (118 > 50)
    "PLR0917", # Too many positional arguments
    "PLR2004", # Magic value used in comparison, consider replacing `200` with a constant variable
    "C901", # function_name is too complex
]
select = [
    "ALL",
]

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.isort]
lines-after-imports = 2
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
order-by-type = false
combine-as-imports = true
# force-grid-wrap = 3
force-sort-within-sections = true
# include-trailing-comma = true
split-on-trailing-comma = true
# use-parentheses = true

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
